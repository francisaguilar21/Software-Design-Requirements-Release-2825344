Course Title: Software Design: From Requirements to Release

Description: Follow along with the full life-cycle implementation of a software project. This course takes you from requirements development to modeling, design, coding, and testing. It features a small-scale web application project that realistically depicts the workflow and challenges of a typical software development project. Instructor Neelam Dwivedi brings together the most important concepts, tools, and techniques that developers need to know, including requirements elicitation and validation, proof of concept modeling, best practices for beta deployment, and refactoring. By the end of the course, you'll understand the reality of software engineering—beyond writing code—and know how to effectively structure and manage projects as a team.


***********************************************
Chapter: 1. Sprint 1: Project Kickoff
***********************************************


-----------------------------------------------
Video: Define problem and vision statements
-----------------------------------------------
Note Time:         Note Text:                     

0:01:01            Business Requirements > Product Vision (problem to be solved or vision to be attained) > Project Scope

The Software requirements should be built around those 3 starting with the requirements, not the other way around -- scope -> product vision -> business requirement 

0:01:43            Stakeholder Meeting should be prioritized
-- Involve domain experts to better understand the domain as mentioned in DDD 

0:03:32            Problem Statement can be best described using the Open UP Vision template.
---
"The problem of"
"affects"
"the impact of which is"
"A successful solution would be"
---
This makes the analysis of the problem better, who it affects, how its impact is, and the solution 

0:04:19            Use the Open UP Vision template for analyzing the Product Vision.
---
1. For
2. Who
3. the product
4. that
5. unlike
6. our product 


-----------------------------------------------
Video: Elicit and specify requirements
-----------------------------------------------
Note Time:         Note Text:                     

0:00:34            Requirements Elicitation / Gathering: 1. Interviews 2. Workshop 3. System Requirements 

0:02:03            One way to improve requirements gathering is to make better interview questions. Grouping questions into "current scenario", "current challenges", "suggestions to improve", etc. can help us understand the situation better 

0:02:57            Make sure to list down functional requirements & non-functional requirements 

0:03:11            For functional requirements, list and group them by NEED & FEATURES. You can also include who the user is 

0:04:34            You can then sort the themes (a grouping of NEEDS) so you can have a better picture if there are dependencies and how it should be made 

0:05:04            Create a Use Case Diagram to better provide a high level view of use cases derived from the requirements and who are the users of those features. 


-----------------------------------------------
Video: Requirement validation
-----------------------------------------------
Note Time:         Note Text:                     

0:00:23            Requirement Analysis with (1) User Stories to identify conditions of satisfaction & (2) Use case specifications to identify domain classes, their attributes, and associations 

0:03:49            Validation: Make sure to validate what we're building to our customers. (1) Architectural feasibility: build it the right way. (2) Requirement understanding: build the right thing. 

0:04:12            Mockups / wireframing can help our customers/users understand if we are building the requirements properly. 


-----------------------------------------------
Video: Technology validation
-----------------------------------------------
Note Time:         Note Text:                     

0:00:18            Technology Validation through POC. 

0:00:24            You can start an Application Architecture with a Deployment Diagram to understand how everything will work 

0:01:51            (1) Continuous Integration (CI) is when you can deploy from Dev to Testing environment. (2) Continuous Delivery is when you can make incremental changes from Testing to Staging. (3) Continuous Deployment is when you can easily release changes from Staging to Production seamlessly. 


-----------------------------------------------
Video: POC implementation
-----------------------------------------------
Note Time:         Note Text:                     

0:00:43            POC Functionality:
1. Pick a simple feature
2. Make sure it's in the core requirements
3. Ensure that it tests the entire technology stack 


***********************************************
Chapter: 2. Sprint 2: Beta
***********************************************


-----------------------------------------------
Video: Prepare sprint backlog
-----------------------------------------------
Note Time:         Note Text:                     

0:00:47            In order to make the Product Backlog, you will need to prioritize which features should be made first in accordance to Stakeholder feedback and dependencies 

0:02:11            From the Product Backlog, you will take the Features / User Stories and make the Sprint Backlog 

0:02:34            If you have your features as User Stories, then it is best to use a Story Map. This can help you view your features by seeing it as (1) decomposed, (2) sequenced, (3), themed, and (4) prioritized. The x axis will show the Workflow and Themes while the y axis will show the priority of each story. 

0:03:07            TAKE NOTE: A User Story can encompass two features! 


-----------------------------------------------
Video: Build models
-----------------------------------------------
Note Time:         Note Text:                     

0:00:40            It is a good practice to consider how Data Loading goes from each application and how the flow will be 

0:00:51            A good way to analyze a Use Case is to create a Use Case Sequence Diagram together with the created mock up or wireframe. 


***********************************************
Chapter: 3. Sprint 3: Release 1.0
***********************************************


-----------------------------------------------
Video: Implement 'included' use case
-----------------------------------------------
Note Time:         Note Text:                     

0:00:09            <include> use case is when a functionality depends on the other function in order to work. 


-----------------------------------------------
Video: Refactoring
-----------------------------------------------
Note Time:         Note Text:                     

0:01:41            Refactoring Best Practices:
(1) Ensure complete testing before and after
(2) Do not add any new feature while refactoring
(3) Apply design patterns only when necessary
(4) IF POSSIBLE, plan a separate refactoring-sprint 

